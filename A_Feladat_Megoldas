from abc import ABC, abstractmethod
from datetime import datetime, timedelta


class Auto(ABC):
    def __init__(self, rendszam, tipus, berleti_dij):
        self.rendszam = rendszam
        self.tipus = tipus
        self.berleti_dij = berleti_dij

    @abstractmethod
    def get_info(self):
        pass


class Szemelyauto(Auto):
    def __init__(self, rendszam, tipus, berleti_dij, ulesek_szama, klima):
        super().__init__(rendszam, tipus, berleti_dij)
        self.ulesek_szama = ulesek_szama
        self.klima = klima

    def get_info(self):
        return f"{self.tipus} (Rendszám: {self.rendszam}), Ülések: {self.ulesek_szama}, Klíma: {'Van' if self.klima else 'Nincs'}, Bérleti díj: {self.berleti_dij} Ft/nap"


class Teherauto(Auto):
    def __init__(self, rendszam, tipus, berleti_dij, teherbiras, hidraulikus):
        super().__init__(rendszam, tipus, berleti_dij)
        self.teherbiras = teherbiras
        self.hidraulikus = hidraulikus

    def get_info(self):
        return f"{self.tipus} (Rendszám: {self.rendszam}), Teherbírás: {self.teherbiras} kg, Hidraulikus: {'Van' if self.hidraulikus else 'Nincs'}, Bérleti díj: {self.berleti_dij} Ft/nap"


class Berles:
    def __init__(self, auto, datum):
        self.auto = auto
        self.datum = datum
        self.ar = auto.berleti_dij

    def get_info(self):
        return f"{self.auto.get_info()}, Bérlés dátuma: {self.datum.strftime('%Y-%m-%d')}, Ár: {self.ar} Ft"


class Autokolcsonzo:
    def __init__(self, nev):
        self.nev = nev
        self.autok = []
        self.berlesek = []

    def auto_hozzaad(self, auto):
        self.autok.append(auto)

    def auto_berel(self, rendszam, datum):
        # Dátum érvényességének ellenőrzése (jövőbeni vagy mai dátum)
        if datum.date() < datetime.now().date():
            print("Hiba: Csak jövőbeni vagy mai dátumra lehet bérelni!")
            return None

        # Autó megkeresése
        auto = next((a for a in self.autok if a.rendszam == rendszam), None)
        if not auto:
            print("Hiba: Nem található ilyen rendszámú autó!")
            return None

        # Szabad az autó?
        for berles in self.berlesek:
            if berles.auto.rendszam == rendszam and berles.datum.date() == datum.date():
                print("Hiba: Az autó már foglalt ezen a napon!")
                return None

        # Bérlés létrehozása
        uj_berles = Berles(auto, datum)
        self.berlesek.append(uj_berles)
        print(f"Sikeres bérlés! Ár: {auto.berleti_dij} Ft")
        return uj_berles

    def berles_lemond(self, berles):
        if berles in self.berlesek:
            self.berlesek.remove(berles)
            print("Bérlés sikeresen lemondva!")
        else:
            print("Hiba: Nem található ilyen bérlés!")

    def berlesek_listaz(self):
        if not self.berlesek:
            print("Nincsenek aktív bérlések.")
        else:
            print(f"\n{self.nev} - Aktív bérlések:")
            for i, berles in enumerate(self.berlesek, 1):
                print(f"{i}. {berles.get_info()}")

    def szabad_autok_listaz(self, datum=None):
        if datum is None:
            datum = datetime.now()

        foglalt_rendszamok = [b.auto.rendszam for b in self.berlesek
                              if b.datum.date() == datum.date()]
        szabad_autok = [a for a in self.autok if a.rendszam not in foglalt_rendszamok]

        if not szabad_autok:
            print(f"Nincsenek szabad autók {datum.strftime('%Y-%m-%d')} napra.")
        else:
            print(f"\nSzabad autók {datum.strftime('%Y-%m-%d')} napra:")
            for i, auto in enumerate(szabad_autok, 1):
                print(f"{i}. {auto.get_info()}")


def inicializalas():
    kolcsonzo = Autokolcsonzo("Gyors és Biztos Autókölcsönző")

    # Autók hozzáadása
    kolcsonzo.auto_hozzaad(Szemelyauto("QWE-159", "Toyota Szedán", 15000, 5, True))
    kolcsonzo.auto_hozzaad(Szemelyauto("XYZ-987", "Opel Corsa", 12000, 5, False))
    kolcsonzo.auto_hozzaad(Szemelyauto("DEF-456", "Volvo EX90", 18000, 5, True))
    kolcsonzo.auto_hozzaad(Teherauto("ABC-123", "Volvo FH16", 35000, 25000, True))
    # Bérlések hozzáadása
    mai_datum = datetime.now()
    kolcsonzo.auto_berel("ABC-123", mai_datum)
    kolcsonzo.auto_berel("XYZ-987", mai_datum + timedelta(days=1))
    kolcsonzo.auto_berel("DEF-456", mai_datum + timedelta(days=2))
    kolcsonzo.auto_berel("QWE-159", mai_datum + timedelta(days=3))

    return kolcsonzo


def felhasznaloi_interfesz():
    kolcsonzo = inicializalas()

    while True:
        print("\n=== Gyors és Biztos Autókölcsönző ===")
        print("1. Autó bérlése")
        print("2. Bérlés lemondása")
        print("3. Bérlések listázása")
        print("4. Szabad autók listázása")
        print("5. Kilépés")

        valasztas = input("Válasszon egy menüpontot (1-5): ")

        if valasztas == "1":
            print("\nElérhető autók:")
            kolcsonzo.szabad_autok_listaz()

            rendszam = input("Adja meg a kívánt autó rendszámát: ").strip().upper()
            datum_str = input("Adja meg a bérlés dátumát (ÉÉÉÉ-HH-NN, hagyja üresen, ha a mai napra szeretné kibérelni): ").strip()

            try:
                datum = datetime.strptime(datum_str, "%Y-%m-%d") if datum_str else datetime.now()
                kolcsonzo.auto_berel(rendszam, datum)
            except ValueError:
                print("Hibás dátumformátum! Használja az ÉÉÉÉ-HH-NN formátumot.")

        elif valasztas == "2":
            if not kolcsonzo.berlesek:
                print("Nincsenek aktív bérlések.")
                continue

            print("\nAktív bérlések:")
            kolcsonzo.berlesek_listaz()

            try:
                sorszam = int(input("Adja meg a lemondani kívánt bérlés sorszámát: ")) - 1
                if 0 <= sorszam < len(kolcsonzo.berlesek):
                    kolcsonzo.berles_lemond(kolcsonzo.berlesek[sorszam])
                else:
                    print("Érvénytelen sorszám!")
            except ValueError:
                print("Hiba! Csak számot adjon meg!")

        elif valasztas == "3":
            kolcsonzo.berlesek_listaz()

        elif valasztas == "4":
            datum_str = input("Adja meg a dátumot (ÉÉÉÉ-HH-NN, hagyja üresen, ha a mai napra szeretné kibérelni): ").strip()
            try:
                datum = datetime.strptime(datum_str, "%Y-%m-%d") if datum_str else datetime.now()
                kolcsonzo.szabad_autok_listaz(datum)
            except ValueError:
                print("Hibás dátumformátum! Használja az ÉÉÉÉ-HH-NN formátumot!")

        elif valasztas == "5":
            print("Kilépés...")
            break

        else:
            print("Érvénytelen választás! Válasszon 1-5 között.")


if __name__ == "__main__":
    felhasznaloi_interfesz()
